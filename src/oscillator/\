#pragma once

#include <ctime>
#include <cstdlib>
#include <cmath>

constexpr float pi() {return std::atan(1) * 4;}

class Oscillator{
  float ori_period;
  float ori_phase;
  time_t ori_timestamp;
  float error_bound;
public:
  Oscillator(float period, float phase, time_t timestamp, float error)
    : ori_period( period )
    , ori_phase( phase )
    , ori_timestamp( timestamp )
    , error_bound( error )
  {}

  float getPeriod() {return ori_period;}
  float getPhase() {return ori_phase;}
  time_t getTimestamp() {return ori_timestamp;}
  float getError() {return error_bound;}

  void update(float period, float phase, time_t timestamp) {
    float new_period;
    float new_phase;
    // period not multiple
    if (abs(period - ori_period) <= error_bound) {
      // ori_phase = phase * (static_cast<long>(timestamp) - static_cast<long>(ori_timestamp));
      new_period = period;
      new_phase = phase;
    }
    // multiple
    if (abs(period * 2 - ori_period) <= error_bound) {
      new_period = period;
      new_phase = phase / 2;
    }
    if (abs(period - ori_period * 2) <= error_bound) {
      new_period = period;
      auto numerator = phase / (2 * pi()) * ori_period;
      if (ori_phase > pi()) numerator += pi();
      new_phase = numerator / period * 2 * pi();
    }
    // making phase in range [0,2p]
    if (new_phase < 0) new_phase += (2 * pi());
    else if (new_phase > 2 * pi()) new_phase -= (2 * pi());

    // update field varaibles
    ori_period = new_period;
    ori_phase = new_phase;
    ori_timestamp = timestamp;
  }
};
